= SOLID Go design
Dave Cheney <dave@cheney.net>
v1.0, 3rd May, 2016

== Introduction

Good morning and thank you for coming to my talk.

My name is David, I'm a Go programmer from Sydney, and I'm delighted to be able to talk about Go at a technical conference here in my home country. 

Before I begin I must note that compared to the decades of experience of my fellow speakers at this conference, I feel like somewhat of an interloper.
Although a keen amateur since childhood, I arrived at the software development profession late in life.
My own career, until recently, was focused on what we now call operations.
So I ask that you do not view me as an expert, at best, a peer.

== Introducing Go

My interest in Go was sparked in 2009 by the language's fresh approach to the problems of large scale software development.

Go is a member of a triumvirate of modern languages, Rust and Swift being the other two, that together represent a return to programs compiled directly to machine code.
All three are memory safe, concurrent, and without the requirement for a runtime, such as a virtual machine, or interpreter.
All three represent a movement away from the __everything is an object__ paradigm popularised by Ruby and Java.

Go is a young language.
We celebrated the 4th birthday of the 1.0 announcement footnote:[http://blog.golang.org/go-version-1-is-released] just over a month ago. 

Go is not an academic language.
Go is a language that is explicitly designed for programming _in the large_.footnote:[https://talks.golang.org/2012/splash.article]
Its design is influenced heavily by the needs of its patron, Google.
Go is a language which is designed primarily for the productivity of programmers, plural.

I work on two large Go projects, the first is the Go language itself, the second and more capacious is Juju, from Canonical, who I am grateful for sponsoring me to attend this conference. 

TODO image of go project LOC, Juju LOC

One aspect of dealing with projects of this size is there is more to debate than the minutiae of variable names, file layout, and the correct number of spaces after the period--not that these subjects are immune from heated debate.

This does not to imply that design is not important for smaller programs.
Personally I think we should aim to always write smaller programs, but the realities of commercial software development occasionally impinges on this idealistic world view.
Design is important for programs of all size, but as the size--and age--of a project grows, it becomes paramount.

As authors such as Sandi Metz, Robert Martin, and the late Jim Weirich remind us, the only constant in software development is change.
To believe in a world where software is _done_, in perpetuity, is to believe in a fantasy.

== SOLID Go design

In his book, __Agile Software Development: Principles, Patterns, and Practices__, Robert Martin introduces a series of ideas for the construction of software that is amenable to change.
Martin later codified these ideas as the SOLID principals in an article entitled __Principals of Object Oriented Design__footnote:[http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod] and a series of what we would now call, white papers.

Part of a larger set of design principals, the SOLID principals are closely associated with the object oriented languages of their time, C++, Java, and C#.
Although they span different eras, all three share the same class structured, inheritance based foundation. 

This talk focuses on the interpretation of Go programs according to Martin's SOLID design principals.
It is not a theological deconstruction of the principals themselves.
In effect, I hold them to be self evident, as hopefully do you as indicated by your presence here today.

== Will it blend?

[quote, Alan Donnovan and Brian Kernighan, The Go Programming Language]
The Go project includes the language itself, its tools and standard libraries, and last but not least, a cultural agenda of radical simplicity.

The hallmark of Go's design aesthetic is simplicity.
A sign of this drive towards simplicity is Go's abandonment of traditional class based inheritance.
In fact, Go supports no form of inheritance.

After the initial excitement of C++, and the cold reality of class hierarchies in commercial C# and Java programming, Go's abandonment of inheritance appears prescient.
Not only did this side step the quagmire of multiple inheritance, it committed the language firmly to the paradigm of composition.

Does this mean then that Go programs do not, or can not, follow the SOLID design principals, or that Go is not an object oriented language?
Let us investigate.

== Single responsibility principal

Let's open with the single responsibility principal.

[quote, Robert C. Martin]
A class should have one, and only one, reason to change.

Why is it important that as a unit, a piece of code should have only one impetus for change?
Why should a programmer care about this level of taxonomy?
Because as distressing as the idea that your own code may change, it is far more distressing that code your code depends on is changing under foot.

When your code does change, it should do so in response to a direct stimuli, it shouldn't be a victim of collateral damage.
Change should be compartmentalised, making its effects more focused, and as a result, limiting the blast radius.
Therefore, code that has fewer responsibilities has fewer reasons to change.

Two pieces of code that are highly sensitive to change in their counterpart are said to be tightly coupled.
Coupling is simply a word that describes two things moving together--a change in one induces a change in another.

In electrical engineering, inductive coupling describes the change in current in one winding of a transformer inducing a voltage in the other.
In nature, trees bend in the wind because they are coupled to the motion of air moving across their branches.

Uncle Bob's imperative single responsibility principal is a derived from an older observation by Tom DeMarco.
In his book __Structured Analysis and System Specification__footnote:[http://www.amazon.com/Structured-Analysis-System-Specification-DeMarco/dp/0138543801] DeMarco puts forward a description of software cohesion.

[quote, Tom DeMarco, Structured Analysis and System Specification]
____
Cohesion is a measure of the strength of the association of the elements inside a module.
A highly cohesive module is a collection of statements and data items that should be treated as a whole because they are so closely related.
Any attempt to divide them would only result in increased coupling and decreased reliability.
____

The word _cohesion_, in the context of software, is the property of describing pieces of code are naturally attracted to one another.
They stick together, like the poles of magnets, so where one goes, the other follows.

=== The Go package model
To describe the units of coupling and cohesion in a Go program, we might talk about functions and methods, but really it starts with the package model.

Go packages are composed of various elements; constants, variables, types, functions, and methods.
Each of these can be either public or private, and true to Go's focus on simplicity, a symbol is by default private unless its name starts with an upper case letter.
----
package q

const PI = 355/113 
const Ï† = 1.61803398874

var Log = os.Stdout.Write
var debugging bool

func Dial(network, address string) (net.Conn, error)
func loop(fn func())
 
type Counter struct { val int }
type guage struct { Val int }
----
In Go, all code lives inside a package, even the main function--which we call, not surprisingly, the main package.
In this package delineated world, the units of change are package's visible elements.

=== Package names

A well designed package starts with its name, which is both a description of its purpose, and a name space prefix. Some examples of good packages from the Go standard library might be:
----
// Package http provides HTTP client and server implementations.
package http

// Package bufio implements buffered I/O.
package bufio

// Package json implements encoding and decoding of JSON as defined in RFC 4627.
package json
----
The use of another package's symbols inside your own is accomplished by the `import` declaration, which establishes a source level relationship between two packages.

Once imported, the symbols of that package are always prefixed with the name of their containing package.
This makes it trivial to discern where a symbol is declared.
----
package main

import (
	"fmt"
	"log"
	"net"
	"net/http"
	"time"
)

func main() {
	l, err := net.Listen("tcp", "127.0.0.1:9001")
	if err != nil {
		log.Fatal("could not bind to port", err)
	}
	mux := http.NewServeMux()
	mux.HandleFunc("/time", func(w http.ResponseWriter, req *http.Request) {
		fmt.Fprintf(w, "At the third stroke the time will be: %v", time.Now())
	})
	http.Serve(l, mux)
}
----
This small, but fully functional, _microservice_ tells the caller the time.
This program consumes the services of five packages, ranging from networking, http, string formatting, time, and logging.
The purpose of each of these packages, and your expectation of them, is almost self evident.

It's also a good example of how type inference works in Go.
Go is a statically typed language, yet this program contains only one type declaration, and that one is anonymous.

=== Bad package names

Conversely, a package should not be named after its contents. These are all example of poor package names
----
package server

package private

package utils
----
This isn't just noun pedantry.
In addition to a poorly named package missing the opportunity to enumerate its purpose--what does the private package provide?
Things that I should not see?
Catch all packages become a dumping ground for miscellany, Jack's of all trades, yet responsible to no one.

=== McIlroy's revenge
No discussion of Go, or decoupled design in general, would be complete without mentioning Doug McIlroy.

In 1964 Doug McIlroy postulated about the power of pipes for composing programs.
This was five years before the first Unix was written mind you.

[quote, Doug McIlroy, Quarter Century of Unix (Salus et al.)]
____
This is the Unix philosophy: Write programs that do one thing and do it well.
Write programs to work together.
Write programs to handle text streams, because that is a universal interface.
____
McIlroyâ€™s observations became the foundation of the UNIX philosophy; small, sharp tools which combine to solve larger tasks.
Tasks which oftentimes were not envisioned by the original authors.

Go programs embody the spirit of the UNIX philosophy.
In effect each Go package is itself a self contained Go program, with access to the entire language.
Go programs are therefore composed, just like the UNIX shell, by combining packages together.

== Open / Closed principal

In is 1988 book, __Object-Oriented Software Construction__, Bertrand Meyer defined the Open / Closed principal.

[quote, Bertrand Meyer, Object-Oriented Software Construction]
Software entities should be open for extension, but closed for modification.

The open closed principal, as interpreted by SOLID, states that classes should be open for extension, but closed for modification.
Go does not have classes, however we do have types, and methods on types. Here is an example
----
type A struct {
	v int
}

func (a *A) Value() int { return a.v }
----
The type `A` has a method `Value` which returns the contents of `v`.

You can place methods on any type that you have defined, even basic types like int and string, but we'll leave that to one side for this discusison.
----
type B A
----
We introduce a type `B` which shares the same underlying type as `A`.
Note that `B` does not extend `A`, nor is `B` derived from `A`.
Both `A` and `B` share the same underlying type, a structure with one integer field, `v`.
----
struct {
        v int
}
----
Sharing the same underlying type means that values of type `A` can be converted to type `B` other because ultimately they share the same layout in memory.
----
var a A
a.v = 99
var b = B(a)
fmt.Println(b.v) // 99
----
However, the method set of `B` is distinct from `A`. In fact, in this example it is empty.
----
var a A
a.v = 100
fmt.Println(a.Value()) // 100
var b B
b.v = 200
fmt.Println(b.Value()) // b.Value undefined (type B has no field or method Value)
----
If we want B to have access to A's methods, not just it's fields, we can instead do this.
----
type A struct {
	year int
}

func (a A) Hello() {
	fmt.Println("Hello YOW!West", a.year)
}

type B struct {
	A
}

func main() {
	var a A
	a.year = 2015
	var b B
	b.year = 2016

	a.Hello() // Hello YOW!West 2015
	b.Hello() // Hello YOW!West 2016
}
----
In Go we call this practice _embedding_.
In this example type `B` has a `Hello` method because `A` has been embedded into `B`.

It is as if by embedding `A` into `B` the compiler had provided a _forwarding_ method for us (which is not far from the truth).
----
func (b B) Hello() {
	b.A.Hello()
}
----
But embedding isn't just for methods, it also provides access to an embedded type's fields.
As you saw above, because both A and B are defined in the current package, we can access `A`'s `year` field as if it were defined in `B`.

Embedding allows Go's types to be open for extension.

=== No virtual dispatch

A caller will see `B`'s methods overlaid on `A`'s because `A` is embedded, as a field, within `B`.

However `A` is unaware that it has been embedded into `B`, as such there is no mechanism for `B`'s methods to override `A`'s. 
----
type Cat struct {
	Name string
}

func (c Cat) Legs() int { return 4 }
func (c Cat) PrintLegs() {
	fmt.Printf("I have %d legs\n", c.Legs())
}

type OctoCat struct {
	Cat
}

func (o OctoCat) Legs() int { return 8 }

func main() {
	var octo OctoCat
	fmt.Println(octo.Legs()) // 8
	octo.PrintLegs()         // I have 4 legs
}
----
In this example we have a `Cat` type which can count its number of legs with the `Legs` method.
We embed this `Cat` type into a new type, an `OctoCat`, and declare that octocats have eight legs.

Though `OctoCat` defines it's own `Legs` method which returns 8, when the `PrintLegs` method is invoked, it returns 4.

This is because `PrintLegs` is defined on the `Cat` type, so it dispatches to `Cat`'s `Legs` method.
`Cat` has no knowledge of the type it has been embedded inside of, so its method set cannot be altered by embedding it.

Thus, Go's types are closed for modification.

=== This is not inheritance

This is a not a wacky form of implementing inheritance, there is no implicit _this_ parameter in Go.
The receiver is exactly what you pass into it, the first parameter of the function. 
And because Go does not support polymorphic function dispatch, `OctoCat`'s are not subsitutable for regular `Cat`'s.

In truth, methods in Go are little more than syntactic sugar around a function with a predeclared formal parameter, the receiver. 
----
func (s *Speaker) SayHello(name string)
----
Is just syntactic sugar for
----
func Hello(s *Speaker, name string)
----
And this brings us to the next principal.

== Liskov substitution principal

Coined in 1988 by Barbara Lisvok during her keynote address to the ACM SIGPLAN conference, the Liskov substitution principal states, roughly, that two types are substitute if they exhibit behaviour such that the caller is unable to tell the difference.

In a class based language, Liskov's substitution principal is commonly interpreted as a specification for an abstract base class with various concrete implementations.
But Go does not have classes, or inheritance, so substitution cannot be implemented in terms of an abstract class.

As we saw above, if you have a type
----
type B struct {
	A
}
----
And a function that takes a pointer to an `A`
----
func update(a *A)
----
You can, because the type is public, thus it's embedded field is public, pass a pointer to `B`'s `A` field to the `update` function.
----
var b B
update(&b.A)
----
The embedded `A` structure inside `B` is unaware of the fact it is part of a larger structure, just as values in memory are unaware of their neighbours.
But this isn't really substitution.

=== Interfaces

Substitution in Go is the purview of interfaces.

While Go's packaging system draws strongly from Modula-2, and it's successor Oberon, the design of Go's interfaces are likely influenced by Python's protocols, a legacy from the environment where Go was born. 

In Go, types are not required to nominate, either by an `implements` declaration or by extending from an abstract type, that they implement a particular interface. 
_Any type_ can implement an interface provided it has methods whose signature matches the interface declaration.

While it is not possible to modify a type from another package, at any time an interface may be defined, and if a type satisfies the interface, then automatically that type _is_ an implementation of the desired interface.
We say that in Go interfaces are satisfied implicitly, rather than explicitly, and this has a profound impact on how they are used in the language.

=== Small interfaces

Well designed interfaces are more likely to be small interfaces; the prevailing idiom is an interface contains only a single method.
It follows logically that small interfaces lead to simple implementations, because it is hard to do otherwise.
Leading to packages comprised of simple implementations connected by common behaviour.

A canonical example of small interfaces are the canonical stream oriented behaviours found in the `io` package.
----
type Reader interface {
	// Read reads up to len(buf) bytes into buf. 
	Read(buf []byte) (n int, err error)
}

type Writer interface {
	// Write writes len(buf) bytes from buf to the underlying data stream.
	Write(buf []byte) (n int, err error)
}

type Closer interface {
	// Close closes the underlying data stream.
	Close() error
}
----
Read reads data into the supplied buffer, and returns to the caller the number of bytes that were read, and possibly an error encountered during read.
Write writes the contents of the buffer, which may be less than the total size of the buffer if an error occured.
Close closes the stream, signalling that no further processing will be done.

These three interfaces are highly pervasive inside Go programs, and because of their simple contract, they permit many decoupled implementations. For example
----
package io

// MultiReader returns a Reader that's the logical concatenation of the provided input readers.
func MultiReader(readers ...Reader) Reader

// LimitReader returns a Reader that reads from r but stops with EOF after n bytes.
func LimitReader(r Reader, n int64) Reader
----
`io.MultiReader` takes a variable number of `Reader`'s and returns a single `Reader` which will consume data from each underlying reader until it's exhausted.

The `LimitReader` wraps a reader that will read until it's end of file, into a reader that returns end of file after a certain number of bytes.
----
package io

// TeeReader returns a Reader that writes to w what it reads from r.
func TeeReader(r Reader, w Writer) Reader

// MultiWriter creates a writer that duplicates its writes to all the provided writers.
func MultiWriter(writers ...Writer) Writer
----
The `TeeReader`, analogus to the the `tee(1)` command, returns a `Reader` that copies any data read through it to a `Writer`, effectively enabling you to snoop on `Read` operations. The companion `MultiWriter` returns a `Writer` which copies each `Write` operation to each of the supplied writers.  
----
package strings

// NewReader returns a new Reader reading from s.
func NewReader(s string) *Reader

package bytes

// NewReader returns a new Reader reading from b.
func NewReader(b []byte) *Reader
----
Further afield we have functions which create a reader over a `string` or `[]byte` slice.
----
package main

import (
	"bytes"
	"fmt"
	"os"
)

func main() {
	var b bytes.Buffer      // bytes.Buffer needs no initialization.
	b.Write([]byte("Hello "))
	fmt.Fprintf(&b, "world!")
	b.WriteTo(os.Stdout)	// Hello world!
}
----
The `bytes.Buffer` type is a popular in memory implementation of both `io.Reader` and `io.Writer`.

=== Design by contract

Go does not have Eifel's design by contract, but we do have a tradition of small interfaces.

[quote, Jim Weirich]
Require no more, promise no less

So the Liskov substitution principal could be summarised by this lovely aphorism from Jim Weirich.
And this is a great segue into the next SOLID principal.

== Interface segregation principal

[quote, Robert C. Martin]
Clients should not be forced to depend on methods they do not use.

The interface segregation principal states that clients should not be forced to depend on irrelevant parts of an interface.
When Martin talks about interfaces, he's making a broader definition than the one I just described in Go because interfaces in C++ are wedded to a notion of an absract type in a class heirarchy.

In Go the application of the interface segregation principal can refer to a process of isolating the behaviour required for a function to do its job.
As a concrete example, say I've been given a task to write a function that persists a data structure, describing some kind of document, to disk.
I could specify this function to take an `*os.File`, a type from the standard library that describes files:
----
// Save writes the contents of doc to the file f.
func Save(f *os.File, doc *Document) error
----
`Save`'s signature precludes the option to write the document to a network location, unless it was previously made available as a network share.
Assuming that network storage was to become requirement later, the signature of this function would have to change, impacting all its callers.

`Save` would be unpleasant to test, as it assumes that the host running the test will have access to a writable disk, and I would have to ensure that `f` was written to a temporary location and always removed afterwards.
Because this function therefore only works with files on disk, to verify its operation, the test would have to read the contents of the file after being written.

`*os.File` also defines a lot of methods which are not relevant to `Save`, like reading directories and checking to see if a path is a symlink.
It would be useful if the signature of the `Save` function could describe only the parts of `*os.File` that were relevant.

=== Interface abstraction

In Go, we often compose interfaces from smaller ones.
Just as two types can be considered comparable when they have the same set of fields, two interfaces are equal when they have the same set of methods.
The `io` package provides an interface composed of the three basic io interfaces we saw earlier:
----
package io

type ReadWriteCloser interface {
	Reader
	Writer
	Closer
}
----
Using `io.ReadWriteCloser` we can apply the interface segregation principal to redefine `Save` in terms of an interface that described more general stream shaped things.
----
// Save writes the contents of doc to the supplied Writer.
func Save(rwc io.ReadWriteCloser, doc *Document) error
----
With this change, any type that implements the `io.ReadWriteCloser` interface can be substituted for `*os.File`.
This makes `Save` both broader in its operation, and clarifies to both the caller and author of `Save` which methods of the `*os.File` type are relevant to its operation.

But we can take ISP further to improve this function.

Firstly, it is unlikely that if `Save` follows the single responsibilty principal, it will read the file it just wrote to verify its contents--that should be responsibility of another piece of code.
So we can narrow the specification for the interface to just writing and closing.
----
// Save writes the contents of doc to the supplied Writer.
func Save(rc io.WriteCloser, doc *Document) error
----
Secondly, by providing `Save` with a mechnism to close its `WriteCloser` this raises the question of under what circumstances will `rc` be closed.
Possibly this will be unconditionally, or it could be only in the case of success.
This presents a problem for the caller of `Save` as it may want to write additional data after the document is written.

One solution would be to define a new type which embeds an `io.Writer` and provides a `Close` method which does nothing.
----
type NoCloseWriter struct {
	io.Writer
}

func (ncw NoCloseWriter) Close() error { return nil }

nc := NoCloseWriter{Writer: f}
err := Save(nc, doc)
if err != nil {
    ...
}
----
A better solution would be to redefine `Save` to take only an `io.Writer`, stripping it of the responsibilty to do anything but write data to a stream.
----
// Save writes the contents of doc to the supplied Writer.
func Save(rc io.Writer, doc *Document) error
----
By applying the interface segregation principal to `Save` it has simultaniously become the most specific in its requirements--it only needs a thing that is writable--and the most general in its function, it can write a document to anything which is writable.

== Dependency inversion principal

At this point, hopefully you'll agree with me that in Go, interfaces describe the behaviour of components, types provide the implementations.
As Go's interfaces are satisfied _implicitly_, it is not the implementation that dictates which interfaces it implements, that privilege belongs to the consumer.

The final SOLID principal is the dependency inversion principal.

[quote, Robert C. Martin]
Depend on abstractions, not on concretions.

What is a concretion, and how does it invert one's dependencies.
What does dependency inversion mean in practice for Go programmers?

At a basic level if a concretion is a type, an abstraction would therefore be an interface.
More fundamentally a concretion is one piece of code depending on another.

If you've applied all the principals up to this point your code should be factored into discrete packages units with a well defined purpose.
Your code should describe its dependencies in terms of interfaces, and those interfaces should be factored to describe only the behaviour thoes functions require.
In other words, there shouldn't be much left to do at this point.

The only thing remaining to consider at this point is to talk about source level coupling.

In Go, the import graph must be acyclic.
A package is not permitted to import itself, either directly, or transitively.

== A theme

Each of Martin's SOLID principals are powerful ideas in their own right, but taken together they have a central theme; dependency management.

Martin's observation is all five of the SOLID principals relate to managing the dependency between software units.
The dependencies between functions, the dependencies between types, the dependencies between packages.
This is another way of saying "decoupling", which is indeed the goal, because software that is loosely coupled is software that is easier to change.

SRP encourages you to structure your functions and types into packages that exhibit natural cohesion, the types belong together, they serve a singular purpose.

OCP encourages you to compose types with embedding rather than extend them through inheritance.

LSP encourages you to describe the dependencies between your packages in terms of interfaces, not concrete types.
By defining small interfaces, we can be more confident that implementations satisfy the behaviour of the interface.

ISP takes that idea further and encourages you to define functions and methods that depend only on the behaviour that they need.
If your function on requires a parameter with a single interface method, then it is more likely to have only one responsibility.

DIP encourages you to refactor the number things your code expects from the source level--in Go we see this with a reduction in the number of `import` statements--to run time.

== In Closing

[quote,Sandi Metz]
Design is the art of arranging code that needs to work _today_, and to be easy to change _forever_.

If you were to summarise this talk it would probably be; interfaces let you apply SOLID principals to Go programs.
Interfaces in Go are a unifying force; they are _the_ means of describing behaviour.

Interfaces let programmers describe what their function, method, or package provides--not how it does it.
This shouldn't really be a surprise, as Go's interfaces provide the language with polymorphic dispatch, which really is the core of object orientation.

Thank you.
