Gopher Puzzlers
Golang Paris
11 Oct 2016

Dave Cheney
Canonical
dave@cheney.net
http://dave.cheney.net/
@davecheney

* Who's read this book ?

.image gopher-puzzlers/java-puzzlers.jpg 461 _ 

* How well do you know your language ?

* Named and unnamed

TODO: rename to "assignment"

Does this code compile ?

.play gopher-puzzlers/named-and-unnamed.go /START OMIT/,/END OMIT/

- Yes - Why ?
- No - Why not ?

* Named and unnamed (cont.)

Yes, it does compile.

* Named and unnamed (cont.)

Why is this even a thing ?

Well, if it wasn't, then you wouldn't be able to write things like

    	type stack []uintptr
	var st stack = make([]uintptr, 20)

* Named and unnamed (cont.)

There is a bigger point here, unamed types are _very_ common in Go. We almost don't see them they are that common.

You'd expect this to not compile

    type TING int
    
    func Blort(t TING) {}
    
    func main() {
    	var i int = 200
    	Blort(i)
    }

But would you expect this to compile?

    type TING int
    
    func Blort(t TING) {}
    
    func main() {
    	Blort(200)
    }


* Two hundred

What does this program print ?

.play gopher-puzzlers/twohundred.go /START OMIT/,/END OMIT/

* Snowman or poop

On _Linux_ what will this program print ?

.code gopher-puzzlers/snowman-or-poop.go /START OMIT/,/END OMIT/

* Snowman or poop (cont.)

`os.Pipe` calls `pipe(2)` and returns two `*os.File` values. We called them `r` for reader and `w` for writer, but in truth they are bi-directional.

If either end can be a reader _and_ a writer _and_ a closer, why does it matter which end calls close ?

.link https://github.com/golang/go/issues/10001

* Snowman or poop (cont.)

It gets worse. Closing an fd returns it to the processes table of free file descriptors. Suddenly that read(2) on fd 7 is reading a different fd.

.link http://man7.org/linux/man-pages/man2/close.2.html#NOTES

* Snowman or poop (cont.)

Question: Why is it important to sleep for a short time before `r.Close()` ?

Question: Why is it important to call `w.Close()` ? What could happen if we don't ?

* Missing panic

This program prints a panic message to the screen.

.play gopher-puzzlers/missing-panic.go

Without using `recover`, can you suppress the panic message?

* Missing panic (solution)

.play gopher-puzzlers/missing-panic.go

* Missing panic (cont.)

What's going on here.

- fd 2 is considered by the runtime to be stderr, panic messages are written to it. TODO(dfc) add link to runtime code

- fd 2 is initalised as os.Stderr by the os package. TODO(dfc) code sample and link to os code

- If we close os.Stderr, file descriptior 2 is now closed so the write of the panic message

* Missing panic (cont.)

This is something that cannot be fixed without breaking backward compat.

- Maybe `os.Stderr` should not be a `*os.File`.

- Probably still has to retain a `Close` method.

- You can redirect panic messages to another location by replacing fd 2.

- Probably not a serious problem, you can do this in almost every language.
- Someone replacing
