gb, a project based build tool
GoSF
15 Jul 2015

Dave Cheney
dave@cheney.net
http://dave.cheney.net/
@davecheney

* Women who Go

.image gb/women-who-go.jpeg 450 _
.caption [[http://www.womenwhogo.org][www.womenwhogo.org]]
.caption [[http://www.meetup.com/Women-Who-Go][www.meetup.com/Women-Who-Go]]

* gb

# A few months ago I introduced gb as a proof of concept to the audience at GDG Berlin. Since then, together with a small band of contributors and an enthusiastic cabal of early adopters, gb has moved from proof of concept, written mostly on trains during a trip through Europe, to something approaching a usable build tool.

.image gb/gb.svg _ 400

- Project based workflow
- Repeatable builds via source vendoring 
- Vendoring without rewriting imports
- Reusable components and a plugin interface

* How is gb different ?

# In the previous section I outlined the advantages I see in using a project based tool to build Go applications. I want to digress for a moment to explain why gb is different to other existing go build tools.

gb is not a wrapper around the `go` tool

# gb is not a wrapper around the go tool. Not wrapping the go tool means gb is not constrained to solutions that can be implemented with $GOPATH tricks. Not relying on the go tool means gb can ship faster, and fix bugs faster than the fixed pace of releases of the Go tool chain.

- This gives gb agility. We can talk about building code without fitting it through the needle of `go`build`.
- This gives gb speed. You don't have to wait for months to get a bug fixed in your build tool.
- This gives gb extensibility. gb is a Go package, and `cmd/gb` is a consumer of that package. We also support a git style plugins which reuse gb code.

# As gb is written in Go, it's packages can be used to create plugins to gb that extend its functionality.

gb does not use `$GOPATH`

- `$GOPATH` only allows one copy of a project, and its dependencies.
- moving away from the `go` tool actually means moving away from `$GOPATH`.
- why move away from `$GOPATH`, because `$GOPATH` doesn't help dependency management.

* Why is a project based approach useful ?

# Why is a project based approach, as opposed to a work space based approach like $GOPATH, useful ?

# First and foremost, by structuring your Go application as a project, rather than a piece of a distributed global work space, you gain control over all the source that goes into your application, including that of its dependencies.

# Second, while your project's layout contains both the code that you have written, and the code that your code depends on, there is a clear separation between the two; they live in different sub directory trees.

# Thirdly, now your project, and by extension the repository that houses it, contains all the source to build your application, having multiple working copies on disk is trivial. If you are part of a team responsible for maintaining multiple releases, this is a very useful property.

# Lastly. As your project can be built at any time without going out to the internet to fetch code, you are insulated from political, financial, or technical events that can unexpectedly break your build. Conversely, as the dependencies for your project are included with the project, upgrading those dependencies is atomic and affects everyone on the team automatically without them having to run external steps like go get -u or godeps -u dependencies.txt.

- Control all your source, including your dependencies.
- Multiple working copies, release branches, feature branches, etc are trivial.
- Clear separation between the code you write, and the code you depend on.
- Upgrade your team on your schedule.
- Don't let the internet break your team.
- Nifty tooling. Go is all about tools, and gb gives you even more tools.

* No import rewriting

gb is built around a philosophy of leaving the source of your project's dependencies untouched.

It is my hope that maybe one day, build tools like gb can get a bit smarter about managing dependencies, and avoid the need for whole cloth vendoring, but this cannot happen if imports are rewritten.

* Being a project owner

The owner of the project has a special responsibility

- Responsible for admitting new dependencies into a project.
- Curating those dependencies once they are part of the shipping product.

Whether the role of project owner falls to a single engineer, or is distributed across your whole team, it is the project owner who is ultimately responsible for shipping your product.

gb gives you the tools to achieve this without becoming beholden to a third party.

# Project ownership is important. You, the developer, the project owner, the build engineer, needs to own all the source that goes into your product whether you wrote it or not. Don't be the person who cannot deliver a release because GitHub is down.

* Whirlwind tour

* Creating a gb project (1/3)

Creating a gb project is as simple as creating a directory.

# This directory can be anywhere of your choosing; it does not need to be inside $GOPATH, in fact gb does not use $GOPATH.

	% mkdir -p demo/src
	% cd demo

`demo` is now a gb project, as it contains a directory called `src/`

# A gb project is defined as any directory that contains a directory called src/. We'll refer to the root of the project, demo in this case, as the project root, or $PROJECT for short. Let's go ahead and create a single main package.

	% mkdir -p src/cmd/helloworld
	% cat > src/cmd/helloworld/main.go <<EOF
	package main

	import "fmt"

	func main() {
		fmt.Println("Hello world from gb")
	}
	EOF

# Commands (main packages) don't have to be placed in src/cmd/, but that is a nice tradition that has emerged from the Go standard library, so we'll follow it here.

Although gb does not use the `go` tool, your code must still be structured into packages.

In fact gb is much stricter in this respect, Go code can only be built if it is inside a package, there are no facilities to build or run a single `.go` source file.

* Creating a gb project (2/3)

With all this said, let's go ahead an build this project, then run the resulting program

	% gb build
	cmd/helloworld

When compiling, packages will be built and placed in `$PROJECT/pkg/` for reuse by latter compilation cycles, main packages (commands), will be placed in `$PROJECT/bin/`.

	% bin/helloworld 
	Hello world from gb

gb has support for incremental compilation. `gb`build` always builds _and_ installs.

gb supports all the usual ways of compiling one package by passing the name of the package to gb build, but it is simpler to just build the entire project by staying at the root of your project and issuing `gb`build` to build all the source in your project.

* Creating a gb project (3/3)

If this project containes multiple commands, they will all be built and placed in `$PROJECT/bin/`.

Here is an example with a few more main packages in this project, let's build them and look at the result

	% gb build
	cmd/client
	cmd/helloworld
	cmd/server
	% ls bin/
	client  helloworld  server

* gb project layout

Let's have a look at the directory tree of this project to illustrate the gb project concepts.

    % tree $(pwd)
    /home/dfc/demo
    ├── bin
    │   ├── client
    │   ├── helloworld
    │   └── server
    └── src
        └── cmd
            ├── client
            │   └── main.go
            ├── helloworld
            │   └── main.go
            └── server
                └── main.go

    6 directories, 6 files

Other directories you will find inside a gb project is `$PROJECT/pkg/`, for compiled go packages, and `$PROJECT/vendor/` for the source of your project's dependencies.

* Source control

gb doesn't care about source control, all it cares about is the source of your project is arranged in the layout it expects. How those files got there, or who is responsible for tracking changes to them is outside gb's concern.

# Of course, source control is a great idea, and you should be tracking the source of your project using source control. Let's create a git repo in the $PROJECT root now

    % git init .
    Initialized empty Git repository in /home/dfc/demo/.git/
    % git add src/
    % git commit -am 'initial import'
    [master (root-commit) aa1acfd] initial import
     3 files changed, 21 insertions(+)
     create mode 100644 src/cmd/client/main.go
     create mode 100644 src/cmd/helloworld/main.go
     create mode 100644 src/cmd/server/main.go

You should not place `$PROJECT/bin/` or `$PROJECT/pkg/` under source control, as they are temporary directories.

You may wish to add a `.gitignore` or similar to prevent doing so accidentally.

* Using the gb-vendor plugin (1/3)

gb's answer to dependency management is vendoring, copying the source of your project's dependencies into `$PROJECT/vendor/src/`.

To assist with this process, gb ships with a plugin called `gb-vendor`, which aims to automate a lot of this work.

    % gb build
    FATAL command "build" failed: failed to resolve import path "cmd/gsftp": cannot find package "github.com/pkg/sftp" in any of:
            /Users/dfc/go/src/github.com/pkg/sftp (from $GOROOT)
            /Users/dfc/devel/gsftp/src/github.com/pkg/sftp (from $GOPATH)
            /Users/dfc/devel/gsftp/vendor/src/github.com/pkg/sftp
    % gb vendor fetch github.com/pkg/sftp
    fetching recursive dependency github.com/kr/fs
    fetching recursive dependency golang.org/x/crypto/ssh
    % gb build
    github.com/kr/fs
    golang.org/x/crypto/ssh
    golang.org/x/crypto/ssh/agent
    github.com/pkg/sftp
    cmd/gsftp

* Using the gb-vendor plugin (2/3)

It is a good idea to add your `$PROJECT/vendor/` directory to source control.

	% git add vendor/
	% git commit -am 'added vendored dependencies'

gb-vendor also provides commands to update, delete, and report on the vendor dependencies of a project. For example

	% gb vendor update github.com/pkg/sftp

will replace the source of `github.com/pkg/sftp` with the latest available upstream.

	% gb vendor delete github.com/pkg/kr/fs

will remove `$PROJECT/vendor/src/github.com/pkg/kr/fs` from disk, and remove its entry from the manifest file.

* Using the gb-vendor plugin (3/3)

Lastly, the `gb`vendor`list` sub command behaves similarly to `go`list` and lets you report on the dependencies recorded in the manifest file.

    % gb vendor list
    github.com/kr/fs        https://github.com/kr/fs               master 2788f0dbd16903de03cb8186e5c7d97b69ad387b
    github.com/pkg/sftp     https://github.com/pkg/sftp            master 518aed2757a65cfa64d4b1b2baf08410f8b7a6bc
    golang.org/x/crypto/ssh https://go.googlesource.com/crypto/ssh master 02a186af8b62cb007f392270669b91be5527d39c

* Manifest what!

# At this point you're probably saying, "Hang on, aren't you the person who made a big song and dance about no metadata files ?".

gb-vendor records the dependencies it fetches in a manifest file, `$PROJECT/vendor/manifest`

The manifest file is only used by `gb-vendor`. It is not required to use `gb`.

`gb-vendor` is a plugin, it adds a little bit of smarts on top of git clone, or hg checkout, but it isn't mandatory to use `gb-vendor` to manage the dependencies in a gb projects.

All gb cares about is finding the source on disk with the correct layout.

* Live demo time

* Wrapping up 

* By the numbers

.image gb/stars.png _ 800

Thank you to all the contributors:

Dávid Kaya, Mario Kostelac, Chris Hines, Gustav Paul, Will Madison, Maurice Nonnekes, Jesus Alvarez, Ulf Holm Nielsen, Daniel Martí, Henry B., Ryan Endacott, 42wim, Alexandre González, Christopher Taylor, Edward Muller, euank, Karan Misra, Maciej Pasternacki, Sheena Artrip, Asbjørn Bjørnstad, Jason Buberel, Antonio Cortes, Tobias Breitwieser, and Fabrizio Milo.  

* How does gb handle the diamond dependency problem ?

The linker requires that there be only one copy of a package linked into the final binary.

# In every Go program, regardless of which tool built it (gb, the go tool, Makefile, or by hand), there may only be one copy of a package linked into the final binary.

Project owners responsible for managing this requirement.

# For project owners this means that if they encounter a situation where two dependencies of their project expect different exported API's of a third package, they must resolve this problem at the point they introduce these dependencies into their project.

Resolving a conflict requires the project owner choose _one_ copy of the source of a dependency placed in `$PROJECT/vendor/src/`

# Resolving a diamond dependency conflict requires the project owner choose which copy (Go packages do not have a notion of versions) of the source of that third dependency they will place in $PROJECT/vendor/src/ and adjusting, updating, or replacing other dependencies as required.

* How does Go 1.5's vendoring support change things ?

@kr's proposal was accepted as an experiment for Go 1.5, godeps now supports the `vendor/` subdir.

Many other annoying `go` tool bugs fixed in Go 1.5—Competition is good for consumers.

`go`get` users can now vendor their dependencies into their repos.

Gets more confusing when one `go`get` able repo depends on another.

Doesn't really affect gb; we dont use `go`get` and gb projects are not `go`get` able.

* Can a gb project be a library ?

TL;DR: yes (with caveats)

# In the presentations I've made about gb, I have focussed on development teams shipping products written in Go. I see these teams as the ones who have the most to gain, and the least to lose, from adopting gb, so it is reasonable to focus on those teams first.

You can use gb to build libraries (effectively gb projects that don't have main packages)

Manually copy that project's `src/` directory into another gb project. 

# You can also use gb to build libraries (effectively gb projects that don't have main packages), and then vendor the source of that project's src/ directory into another gb project as demonstrated above.

Support for this in `gb-vendor` not complete (patches welcome!).

# At the moment no automated tools exist to assist with this process, but it is likely that gb-vendor will acquire this ability if there is significant demand in developing libraries in the gb project format.

* gb

.image gb/gbee.jpg 350 _

- Project based workflow
- Repeatable builds via source vendoring without import rewriting
- Reusable components with a plugin interface
