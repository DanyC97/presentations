Seven ways to profile a Go program
GolangUK
18 Aug 2016

Dave Cheney
Himself
dave@cheney.net
http://dave.cheney.net/
@davecheney

* Welcome

Hello!


* What's all this then?

Seven different ways to profile the same program.

Not all of them are available on every platform.

* What program ?

Let's not be coy, 

    go tool compile

* Profiling basics

Before you profile, you must have a stable environment to get repeatable results.

- The machine must be idle—don't profile on shared hardware, don't browse the web while waiting for a long benchmark to run.
- Watch out for power saving and thermal scaling.
- Avoid virtual machines and shared cloud hosting; they are too noisy for consistent measurements.
- There is a kernel bug on OS X versions less than El Capitan; upgrade or avoid profiling on OS X.

If you can afford it, buy dedicated performance test hardware. Rack them, disable all the power management and thermal scaling and never update the software on those machines.

For everyone else, have a before and after sample and run them multiple times to get consistent results.

* /usr/bin/time

* /usr/bin/time

Show time, show time -v, show /usr/bin/time and /usr/bin/time -v

Show how to use -toolexec and time -f … to profile a build

* Go debug / gctrace

Show godebug, gctrace, schedtrace

* Pprof / pkg/profile

Talk about taking whole program profiles,

* /debug/pprof

Show debug pprof, talk about the memstats interface 

Talk about the differences between full and timed mode

Show graphical view

* Perf

Show perf(1), show -g, 

* Flame graph

Show pprof -> flame graph using go-uber

* Trace

Show trace support, best til last.

* Why 

Different tools give you a different perspective on the performance of your application.

Maybe you don't need to know always use every one of these tools, but a working knowledge of most will serve you well.
