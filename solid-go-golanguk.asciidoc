= SOLID Go design
Dave Cheney <dave@cheney.net>
v1.0, 17th August, 2016

== Welcome

Good morning and thank you for coming to my talk.

This morning I want to open my talk with by continuing a theme from Damian's keynote last year.

How many Go programmers are there in the world?
Does anyone want to have a guess?

Last month I was lucky enough to pose this question to Donnie Berkholz, but it turned out he misherd me and instead told me that he thinks, in the world, there are around 25 million programmers.

A stat from a few years ago put the number of Java progrmmers at roughly 9 million.
In his keynote late last year, Martin Odesrsky said last there are around 100 thousand scala deveolopers.

OK, let's leave this question for a bit.

== The Go standard library

How many of you have read the source of the Go standard library?
What did you think?
Is it good?
All of it?
Which bits didn't you like?
Can you tell me why?
What makes you think it's [good, well designed]?

== Code review

Ok, one more question before we get into it.
Who here does code review as part of their job?

 - slide, code review vs pair programming ?

Ok, how do you do it ?

So, what are some of the things that you look for in a review?
How do you know when code is good ?
If code review is there to catch bad code, then you should be able to tell what good code is.

Testing, ok, what about tests,
Is it sufficient to have tests ?
How can you tell if tests are good ?

== Good code

Why do I keep saying good?
We're talking about a computer program, it's a pretty restricted grammar, this isn't popular fiction, source code isn't trying to evoke an emotinoal response.
But this is the thing, whenever we discuss software, as a group, inevitably the discussion turns to adjectives like good. 
Good code, good design, etc
This sort of implies there is a kind of binary nature to code; good code implies the presence of bad code.

== Bad code

So what are the properties of bad code that you might pick up on in code review.

- Rigidity. Is the code rigid, does it have such a straightjacket of overbearing types and parameters, that making modification difficult.
- Fragility. Is the code fragile, such that the slightest change ripples throught the codebase causing untold havoc?
- Immobility. Is the code hard to refactor, is it one keystoke away from an import loop?
- Needlessly complex. Is there code for the sake of having code, are things overengineered in the hope that one day you'll need it. YAGNI?
- Needlessly verbose. Is it just exhausting to use the code?
- Opacity. Can you even tell what this code is trying to do?

Are these positive sounding words?
Would you be pleased to see these works used in a review of your code?

== Good design smells

ok, so that's great, now we can say things like "i don't like this because it's too had to modify", or, "i don't like this because i cannot tell what the code is trying to do", but what can we do about it ? 

== Code re

Ok. So in code review, you're looking for a good design.
But, how did you learn what good design mean?
what are the signs of good design ?

Wouldn't it be great if there was some way to codify good design.
Wouldn't that be neat?
Wouldn't that make things easier, if we all spoke the same language of design.
Just as we all speak the same language of source code?
Do you think that would be useful ?

== Patterns

image GOF patterns book

Who’s read this book ?
If you haven’t read all of it, you’ve probably heard of it.
Who thinks this book teaches you good design?

Ok. What about negative responses, who doesn't like this book?
Who thinks this book does _not_ teach you good design?

I don't think you'll find advice for good design here.
Certainly rules for cookie cutter patterns (that's why it's called the patterns book), but that's about it.

Because the problem is the Gof patterns are absolutes.
Have problem x, use a visitor.
Have problem y, use a delegate.
Have problem z, try a factory.
And this isn't a surprise (gof authors) state themselves that they didn't invent the patterns in this book.
They uncovered them, lying in plain sight repeated over and over in programs they studied. 

At the time this book was written it was thought that there were going to be hundreds of patterns books.
But it turned out you cannot invent patterns, only discover them.
Patterns are like physical laws, which are limited in number. Otherwise they wouldn't be fundamental. Would they?
Patterns represent observations about the languages in use at the time. Nothing more. 

But the world isn't that simple. The problem you've been assigned will come with requirements and it will come with constraints. And it's those constraints just as the requirements that dictate the solution to the problem.

== Design principals

So, if not patterns, then what?

image Agile Software Development, Principles, Patterns, and Practice

Who's read this book?
Admitedly it's getting quite expensive these days

And in it, Robert Martin described five principles of reusable software design.
He called these the solid principals.

 - slide, SOLID

Now, these principles were written back in the 90's and when Martin describes them in his book, they are described in terms of the languages in use at the time; java, c++, python, smalltalk. 

But, if patterns are too prescriptive, perhaps a more holistic idea like these principals may give us a clue about how to talk about a well designed Go program.

== Single responsibility principal

The first principle, probably the most well known, the S in SOLID, stands for the single responsibility principle.

The SRP states

[quote, Robert C. Martin]
____
A class should have one, and only one, reason to change.
____

Obviously Go is not a class based language, but if you can look past the use of the word class, and instead focus on the rest of the sentence; one and only one reason to change.

Why does this matter? Why is it important that as a unit, a piece of code should have only one impetus for change?

Well, in 1968, Melvin Conway coined what has come to be known as Conway's Law.

[quote, Melvin Conway, 1968 National Symposium on Modular Programming]
____
Organizations which design [software] systems ... are constrained to produce designs which are copies of the communication structures of these organizations.
____
This statement has wide ranging application, but for today, the key here is, software doesn't make decisions, organisations do -- software just reflects the decisions after the fact

When you make a decision, someone writes some code to implement it.
When you _change_ a decision, someones has to change the code.

And  as distressing as the idea that your own code may change, it is far more distressing that code your code depends on is changing under your feet.
When your code does have to change, it should do so in response to a direct stimuli, it shouldn't be a victim of collateral damage.

Two pieces of code that are highly sensitive to change in their counterpart are said to be tightly coupled.
Coupling is simply a word that describes two things change together--a change in one induces a change in another.

Therefore, code that has fewer responsibilities has fewer reasons to change. And when it does require change, it can do so with as little impact to its surondings.

A related notion is the idea of cohesion, can be described by it's hypernim, adhesion. To ahere is to stick, glue aheres two unlike surfaces

=== The Go package model

To describe the units of coupling and cohesion in a Go program, we might talk about functions and methods, as is very common when discussing SRP but really it starts with the go package model.

Go packages are composed of various elements; constants, variables, types, functions, and methods.

Each of these can be either public or private, or if you like, exported or unexported.

and true to Go's focus on simplicity, everything in a package is by default private unless its identifier starts with an upper case letter

=== Package names

In Go, all code lives inside a package, even the main entry function--which we call, not surprisingly, the main package.

A well designed package starts with its name, which is both a description of its purpose, and a name space prefix. Some examples of good packages from the Go standard library might be:

http, which provides http clients  and  servers

exec, which runs external commands

json, which implements encoding and decoding of JSON documents.

When you use another package's symbols inside your own this is accomplished by the `import` declaration, which establishes a source level dependency (coupling?) between two packages.

Once imported, the symbols of a package are always prefixed with the name of their package. This makes it trivial to discern where an identifier is declared.

=== Bad package names

This focus on names is not just noun pedantry.

A poorly named package misses the opportunity to enumerate its purpose, if indeed it had one.

    package server

What does the server package provide … well a server, hopefully, but which protocol ?

what does the private package provide? Things that I should not see?

And package common, is often found close because if gone to that level of granularity, you’ll have a server package, you’ll need a client package, and a common package. All three are code smells.

Catch all packages become a dumping ground for miscellany, Jack's of all trades, yet responsible to no one, and change frequently and without cause.

=== McIlroy's revenge

No discussion of Go, or decoupled design in general, would be complete without mentioning Doug McIlroy.

In 1964 Doug McIlroy postulated about the power of pipes for composing programs.

McIlroy’s observations became the foundation of the UNIX philosophy; small, sharp tools which combine to solve larger tasks which oftentimes were not envisioned by the original authors.

I think that Go packages embody the spirit of the UNIX philosophy. In effect each Go package is itself a small Go program, with access to the entire language.

And just like programming with the unix shell, Go programs are therefore composed by combining loosely coupled packages together.

== Open / Closed principal

The second principle, the O, is the open closed principle. 

This was first described in 1988 by Betrand Meyer.

[quote, Bertrand Meyer, Object-Oriented Software Construction]
____
Software entities should be open for extension, but closed for modification.
____

which, as re-interpreted by SOLID, states that classes should be open for extension, but closed for modification.

Go does not have classes, however we do have types, and methods on types.

In this example 

Type A is a structure with one field, an integer named v.

The type `A` has a method `Value` which returns the contents of its `v` field.

We introduce a type `B` which shares the same underlying type as `A`.

Note that `B` does not extend `A`, nor is `B` derived from `A`.

Both `A` and `B` share the same underlying type, a structure with one integer field, `v`.

But that’s all

Sharing the same underlying type means that values of type `A` can be converted to type `B` because ultimately they share the same layout in memory.

However, the method set of `B` is distinct from `A` because while they share the same underlying type, methods are associated only with the type they were declared for.

In fact, in this example the method set of B is empty.

This is why compilation has failed

B has not inherited the Value method.

If we want one type to have access to another’s methods,we can instead do this.

We have a type A, with a field, year, which has a method Greet

We have a second type B using this new syntax, In Go we call this practice _embedding_.

A caller will see `B`'s methods overlaid on `A`'s because `A` is embedded, as a field, within `B`.

tf. B can provide it’s own Greet method

But embedding isn't just for methods, it also provides access to an embedded type's fields.

As you see, because both A and B are defined in the same package, B can access `A`’s private `year` field as if it were defined in `B`.

Embedding allows Go's types to be open for extension.

In this example we have a `Cat` type, which can count its number of legs with the `Legs` method.

We embed this `Cat` type into a new type, an `OctoCat`, and declare that octocats have eight legs.

Though `OctoCat` defines it's own `Legs` method which returns 8, when the `PrintLegs` method is invoked, it returns 4.

This is because `PrintLegs` is defined on the `Cat` type, it takes a Cat as its receiver, and so it dispatches to `Cat`'s `Legs` method.

`Cat` has no knowledge of the type it has been embedded inside of, so its method set cannot be altered by embedding it.

Thus, Go's types are closed for modification.

This is a not a wacky form of inheritance and there is no implicit _this_ parameter in Go’s methods.

In truth, methods in Go are little more than syntactic sugar around a function with a predeclared formal parameter, the receiver.

The receiver is exactly what you pass into it, the first parameter of the function. 

And because Go does not support function overloading, `OctoCat`'s are not substitutable for regular `Cat`'s.

And this brings us to the next principle.

== Liskov substitution principal

Coined in 1988 by Barbara Lisvok, the Liskov substitution principle states, roughly, that two types are substitutable if they exhibit behaviour such that the caller is unable to tell the difference.

In a class based language, Liskov's substitution principle is commonly interpreted as a specification for an abstract base class with various concrete implementations.

But Go does not have classes, or inheritance, so substitution cannot be implemented in terms of an abstract class hierarchy.

=== Interfaces

Substitution is the purview of Go’s interfaces.

In Go, types are not required to nominate, either by an `implements` declaration or by extending from an abstract type, that they implement a particular interface. 

Instead any type can implement an interface provided it has methods whose signature matches the interface declaration.

While it is not possible to modify a type from another package, at any time an interface may be defined, and if a type satisfies this new interface, then automatically that type is an implementation of the desired interface.

We say that in Go interfaces are satisfied implicitly, rather than explicitly, and this has a profound impact on how they are used within the language.

=== Small interfaces

Well designed interfaces are more likely to be small interfaces; the prevailing idiom is an interface contains only a single method.

It follows logically that small interfaces lead to simple implementations, because it is hard to do otherwise.

Which leads to packages comprised of simple implementations connected by common behaviour.

A canonical example of small interfaces are the stream oriented interfaces found in the `io` package.

Read reads data into the supplied buffer, and returns to the caller the number of bytes that were read, and possibly an error encountered during read.
Write writes the contents of the buffer, which may be less than the total size of the buffer if an error occured.
Close closes the stream, signalling that no further processing will be done.

These three interfaces are highly pervasive inside Go programs, and because of their simple contract, they permit many decoupled implementations. For example

`io.MultiReader` takes a variable number of `Reader`'s and returns a single `Reader` which will consume data from each underlying reader until it's exhausted.

The `LimitReader` wraps a reader in a reader that returns end of file after a certain number of bytes.

The `TeeReader`, analogus to the the `tee(1)` command, returns a `Reader` that as a side effect copies any data read through it to a `Writer`, effectively enabling you to snoop on `Read` operations. 

Further afield we have functions which create a reader over a `string` or `[]byte` slice.

The `bytes.Buffer` type is a popular in memory implementation of both `io.Reader` and `io.Writer`.

=== Design by contract

Go does not have Eiffel's design by contract, but we do have a tradition of small interfaces.

So the Liskov substitution principle could be summarised in Go by this lovely aphorism from Jim Weirich.

[quote, Jim Weirich]
Require no more, promise no less

And this is a great segue into the next SOLID principle.

== Interface segregation principal

The fourth principle is the interface segregation principle.

[quote, Robert C. Martin]
Clients should not be forced to depend on methods they do not use.

The interface segregation principle states that clients should not be forced to depend on methods they do not use.
In Go, the application of the interface segregation principle can refer to a process of isolating the behaviour required for a function to do its job.
As a concrete example, say I've been given a task to write a function that persists a data structure to disk.

    // Save writes the contents of doc to the file f.
    // func Save(f *os.File, doc *Document) error

I could specify this function to take an `*os.File`, a type from the standard library that describes files.
But this has a few problems

The signature of `Save` precludes the option to write the data to a network location, unless it was previously made available as a network share.
Assuming that network storage is likely to become requirement later, the signature of this function would have to change, impacting all its callers.
`Save` is also unpleasant to test, as it assumes that the host running the test will have access to a writable disk
Because this function works directly with files on disk, to verify its operation, the test would have to read the contents of the file after being written.

And I would have to ensure that `f` was written to a temporary location and always removed afterwards.

`*os.File` also defines a lot of methods which are not relevant to `Save`, like reading directories and checking to see if a path is a symlink.
It would be useful if the signature of the `Save` function could describe only the parts of `*os.File` that were relevant.

In Go, we often compose interfaces from smaller ones.
The `io` package provides an interface composed of the three basic io interfaces we saw earlier called io.ReadWriteCloser
You can see the similarities for embedding one interface inside another looks quite similar to embedding type
Using `io.ReadWriteCloser` we can apply the interface segregation principle to redefine `Save` to take an interface that describes more general stream shaped things.

    // Save writes the contents of doc to the supplied Writer.r
    // func Save(rwc io.ReadWriteCloser, doc *Document) error

With this change, any type that implements the `io.ReadWriteCloser` interface can be substituted for the previous `*os.File`.

This makes `Save` both broader in its operation, and clarifies to both the caller and author of `Save` which methods of the `*os.File` type are relevant to its operation.

As the author of Save I no longer have the option to call those unrelated methods on os.File as it is hidden behind the ReadWriteCloser interface.

But we can take the interface segregation principle a bit further.

Firstly, it is unlikely that if `Save` follows the single responsibility principle, it will read the file it just wrote to verify its contents--that should be responsibility of another piece of code.

So we can narrow the specification for the interface we pass to Save to just writing and closing.

    // Save writes the contents of doc to the supplied Writer.
    // func Save(rc io.WriteCloser, doc *Document) error

Secondly, by providing `Save` with a mechanism to close its stream, which we inherited in this desire to make it still look like a file, this raises the question of under what circumstances will `rc` be closed.

Possibly Save will call Close unconditionally, or perhaps Close will be called in the case of success.
This presents a problem for the caller of `Save` as it may want to write additional data to the stream after the document is written.

    // type NoCloseWriter struct { io.Writer }
    // func (ncw NoCloseWriter) Close() error { return nil }

A crude solution would be to define a new type which embeds an `io.Writer` and overrides the `Close` method, preventing `Save` from closing the underlying stream.

But this would probably be a violation of LSP, as NoCloseWriter doesn’t actually close anything. It’s probably ok, because the contract for close is quite loose, but I think we can do better.

    // Save writes the contents of doc to the supplied Writer.
    // func Save(rc io.Writer, doc *Document) error

A better solution would be to redefine `Save` to take only an `io.Writer`, stripping it completely of the responsibility to do anything but write data to a stream.

By applying the interface segregation principle to our `Save` function, the results has simultaneously been a function which is the most specific in terms of its requirements--it only needs a thing that is writable--and the most general in its function, it can now use Save to save our data to anything which implements io.Writer.

== Dependency inversion principal

The final SOLID principal is the dependency inversion principal.

Which states:

[quote, Robert C. Martin]
____
Depend on abstractions, not on concretions.
____

What does dependency inversion mean in practice for Go programmers?

At a basic level if a concretion is a type, an abstraction would therefore be an interface.
More fundamentally a concretion is one piece of code depending on another.

If you've applied all the principles we’ve talked about up to this point your code should be factored into discrete packages each with a single well defined responsibility or purpose.

Your code should describe its dependencies in terms of interfaces, and those interfaces should be factored to describe only the behaviour those functions require.

TODO define interface in the caller

In other words, there shouldn't be much left to do at this point.

So it’s useful to look at a slightly longer version of the dependency inversion principle.

[quote, Robert C. Martin]
____
High-level modules should not depend on low-level modules. Both should depend on abstractions.

Abstractions should not depend on details. Details should depend on abstractions.
____

So what I think Uncle bob is talking about here, certainly the context of Go, is the structure of your import graph.

In Go, the import graph must be acyclic.
A package is not permitted to import itself, either directly, or transitively.
A failure to respect this acyclic requirement is grounds for a compilation failure, but more gravely represents a serious error in design.

All things being equal the the import graph of a well design Go program should be a wide, and relatively flat, rather than tall and narrow.

If you have a package whose functions cannot operate without enlisting the aid of another package, that is perhaps a sign that code is not well factored along package boundaries.

The dependency inversion principle encourages you to push the responsibility for the specifics, the concretions, as high as possible up the import graph, leaving the lower level code to deal with abstractions — interfaces.

== A theme

Each of Martin's SOLID principles are powerful ideas in their own right, but taken together they have a central theme.
Martin's observation is all five of the SOLID principles relate to the management of dependencies between software units.
The dependencies between functions, the dependencies between types, the dependencies between packages.
This is another way of saying "decoupling", which is indeed the goal, because software that is loosely coupled is software that is easier to change.

- SRP encourages you to structure the functions, types, and methods of a Go program into packages that exhibit natural cohesion, the types belong together, the functions serve a singular purpose.
- OCP encourages you to compose types with embedding, rather than extend them through inheritance.
- LSP encourages you to express the dependencies between your packages in terms of interfaces, not concrete types. By defining small interfaces, we can be more confident that implementations will faithfully satisfy the contract of these interfaces.
- ISP takes that idea further and encourages you to define functions and methods that depend only on the behaviour that they need. If your function only requires a parameter with a single interface method, then it is more likely that this function has only one responsibility.
- DIP encourages you to refactor the number things your package depends on at compile time--in Go we see this with a reduction in the number of `import` statements used by a particular package.

== In Closing

In conclusion, Sandi Metz notes that,

[quote,Sandi Metz]
____
Design is the art of arranging code that needs to work _today_, and to be easy to change _forever_.
____

If you were to summarise this talk it would probably be; interfaces let you apply the SOLID principles to Go programs.
Interfaces let Go programmers describe what their package provides--not how it does it.
Interfaces are a unifying force in Go; they are the means of describing behaviour.
This shouldn't really be a surprise, as Go's interfaces provide the language with its polymorphism.
And polymorphism is really the core of all object orientated programming.

== Coda

In closing, let's return to the question I opened this talk with.

How many go developers are there?

Here as my guess:

[quote, me]
____
By 2020, there will be 300-500k Go developers?
____

Here's a very scientific graph I made based on a fair bit of googling. Plotting the various estimates of the number of programmers in the world, then multiplying it by the roughly 1-2% market share Go has at the moment, I think this number is defensible.

Is that so hard to believe, that's only three to five times the number of Scala programmers today.

So what will half a million go programmers do with their time?
Well, they’ll write a lot of Go code and, to be frank, most of it won't be very good, or at least, very remarkable. 

I do not say this to be cruel, and I certainly don't mean to imply these poor programs will be written by the people in this room. 
But, every one of you in this room with experience with development in other languages, some with much larger followings that possibly Go will ever achieve, know from your experience that this is a true prediction.

And this is my point, the derision we use to put down other languages for bloated, poor design, or verbose, or over engineered, could happen to Go.
The biggest threat to Go will not be a faster, special purpose language, but the ability of all of us, all Go programmers, as a population, to not make such a hash of it we start to talk about Go in the way most people talk about Java.

[ image Spring Framework, Golang edition ]

The same veribage that daemonises other languages for being overcomplicated or unworkable, or just in need of a damn good rewrite, may very well happen to Go.

So I have two requests:

My first request, is Go programmers need to stop talking about frameworks, and start talking about design.
We need to stop focusing on performance at all cost, and focus on reuse at all cost. 

This is the point in Go's lifecycle to stop talking about what other languages cannot do.
This is the time to start talking about what we can do, with our language.
What I want to see is people talking about how to use the language we have today, whatever its choices and limitations, to design solutions and to solve problems. 
What I want to hear is people talking about how to design software that is well engineered, decoupled, reusable, and above all responsive to changing requirements.

The second, we need to tell the rest of the world how good software should be witten.
Good software, composable software, software that is ameable to change, and show them how to do it, in Go.
And that starts with you.
Take these design principles and apply them to your projects.
Then make your code open source,
Write about it
Blog about it
Teach a workshop about it
Write a book about it,
Come back to this conference next year and give a talk about it.

[quote, Mahatma Gandhi]
____
Be the change that you wish to see in the world.
____

Thank you.
