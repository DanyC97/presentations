= SOLID Go design
Dave Cheney <dave@cheney.net>
v1.0, 17th August, 2016

== Welcome

Good morning and thank you for coming to my talk.

Before I begin, I want to give a nod to Damian's talk from last year and ask this question:

_How many Go programmers are there in the world?_

Does anyone want to have a guess?

_wait for responses_

OK, those are some good guesses.
I have my own suggestion, but we'll come back to this question at the end of the talk.

== The Go standard library

How many of you have read the source of the Go standard library?

What did you think?
Is it good?

Which bits didn't you like?
Can you tell me why?

== Code review

Ok, one more question before we get into it.
Who here does code review as part of their job?

// slide: code review vs pair programming https://twitter.com/davecheney/status/730194450371117056

If code review is there to catch bad code, then you should also be able to recognize good code when you see it.
What are some of the things that you look for when doing a code review?

How do you know if the code you're reviewing is good, or bad?

What about tests?
Is it sufficient to have tests ?
How can you tell if they're any good?

== Good code

Why do I keep saying good code.

After all, we're talking about a computer program.
This isn't popular fiction, source code isn't trying to evoke an emotional response.

But this is the thing, whenever we discuss software, inevitably the discussion turns to adjectives like good; good code, good design, good style, and so on.

This sort of implies there is a kind of binary nature to code; good code must admit the existance of bad code.

== Bad code

What are the properties of bad code that you might pick up on in code review.

=== Rigidity.
Is the code rigid, does it have such a straight jacket of overbearing types and parameters, that making modification difficult.

=== Fragility.
Is the code fragile, such that the slightest change ripples through the code base causing untold havoc?

=== Immobility.
Is the code hard to refactor, is it one keystroke away from an import loop?

=== Needless complexity.
Is there code for the sake of having code, are things over-engineered in vain hope that one day you might need to implement some obscure option?

=== Needless verbosity.
Is it just exhausting to use the code?

=== Opacity.
Can you even tell what this code is trying to do?

Are these positive sounding words?
Would you be pleased to see these words used in a review of your code?

Probably not.

== Good design

ok, so that's great, now we can say things like "i don't like this because it's too had to modify", or, "i don't like this because i cannot tell what the code is trying to do", but what about leading with the positive?

Wouldn't it be great if there were some ways to describe good design, not just bad design.
Wouldn't it be great if there was some way to codify good design.
Wouldn't that be neat?

Wouldn't that make things easier, if we all spoke the same language of design.
Just as we all speak the same language of source code?
Do you think that would be useful ?

== Design principals

[[agile_book]]
.Agile Software Development, Principles, Patterns, and Practice
image::asgppp.jpg[]

Who's read this book?

This book was first published in 2003, by Robert Martin, and in it he described five principles of reusable software design.
He called these the SOLID principals, after the first letters in their names.

- Single Responsibility Principal
- Open / Closed Principal
- Liskov Substitution Principal
- Interface Segregation Principal
- Dependency Inversion Principal

This book is a little dated, the languages that it talks about are the ones in use a decade or more ago; java, c++, python, smalltalk. 

But, perhaps ideas like these principals may give us a clue about how to talk about a well designed Go program.
So this is what I want to spend some time discussing with you this morning.

== Single responsibility principal

The first principle, and probably the most well known, is the single responsibility principal, which states:

[quote, Robert C. Martin]
____
A class should have one, and only one, reason to change.
____

Now Go obviously doesn't have classes, instead we have the far more powerful notion of composition.
but if you can look past the archaic use of the word class, and instead focus on the rest of the sentence; one and only one reason to change, I think there is some value here.

Why does this matter?
Why is it important that a piece of code should have only one reason for change?

One of the best answers for this comes from, Sandi Metz:

[quote,Sandi Metz]
____
Design is the art of arranging code that needs to work _today_, and to be easy to change _forever_.
____

As authors of software that will be successful, and in that success, grow, and change, a guiding architectural principal must be the construction of software that is amenable to change.

Two pieces of code that are highly sensitive to change in their counterpart are said to be tightly coupled.
Coupling is simply a word that describes two things change together--a change in one induces a change in another.

Therefore, code that has fewer responsibilities has fewer reasons to change.
And when it does require change, it can do so with as little impact to its surroundings.

A related notion is the idea of cohesion, a force of mutual attraction. 

In the context of software, cohesion is the property of describing pieces of code are naturally attracted to one another.
They stick together, like poles of a magnet.

=== The Go package model

To describe the units of coupling and cohesion in a Go program, we might talk about functions and methods, as is very common when discussing SRP but really it starts with Go's package model.

Go packages are composed of various elements; constants, variables, types, functions, and methods.

Each of these can be either public or private, and true to Go's focus on simplicity, everything in a package is by default private unless its identifier starts with an upper case letter.

=== Package names

In Go, all code lives inside a package, and a well designed package starts with its name, which is both a description of its purpose, and a name space prefix.
Some examples of good packages from the Go standard library might be:

- net/http, which provides http clients and servers.
- os/exec, which runs external commands.
- encoding/json, which implements encoding and decoding of JSON documents.

When you use another package's symbols inside your own this is accomplished by the `import` declaration, which establishes a source level coupling between two packages.

Once imported, the symbols of a package are always prefixed with the name of their package.
This makes it trivial to discern where an identifier is declared.

=== Bad package names

This focus on names is not just pedantry.
A poorly named package misses the opportunity to enumerate its purpose, if indeed it had one.

    package server

What does the server package provide … well a server, hopefully, but which protocol ?

    package private

what does the private package provide? Things that I should not see?

    package common

And package common, is often found close by these other offenders. Because if gone down the path of this level of granularity, you’ll have a server package, you’ll need a client package, and a common package. All three are code smells.

Catch all packages become a dumping ground for miscellany, Jack's of all trades, yet responsible to no one, leading them change frequently and without cause.

=== McIlroy's revenge

No discussion of Go, or decoupled design in general, would be complete without mentioning Doug McIlroy, who in 1964 described the power of pipes for composing programs.

McIlroy’s observations became the foundation of the UNIX philosophy; small, sharp tools which combine to solve larger tasks which oftentimes were not envisioned by the original authors.

I think that Go packages embody the spirit of the UNIX philosophy.
In effect each Go package is itself a small Go program, with a single responsibility.

== Open / Closed principal

The second principle, the O, is the open closed principle, which was first described in 1988 by Betrand Meyer.

[quote, Bertrand Meyer, Object-Oriented Software Construction]
____
Software entities should be open for extension, but closed for modification.
____
So, how does this advice apply to a language written 21 years later?
----
type A struct {
        year int
}

func (a A) Greet() { fmt.Println("Hello GolangUK", a.year) }

type B struct {
        A
}

func (b B) Greet() { fmt.Println("Welcome to GolangUK", b.year) }

func main() {
        var a A
        a.year = 2016
        var b B
        b.year = 2016
        a.Greet() // Hello GolangUK 2016
        b.Greet() // Welcome to GolangUK 2016
}
----
We have a type `A`, with a field `year`, which has a method `Greet`.
We have a second type `B` which _embeds_ an `A`.

A caller will see `B`'s methods overlaid on `A`'s because `A` is embedded, as a field, within `B`, and `B` can provide its own `Greet` method, obscuring `A`'s.

But embedding isn't just for methods, it also provides access to an embedded type's fields.
As you see, because both `A` and `B` are defined in the same package, `B` can access `A`'s private `year` field as if it were defined in `B`.

So embedding is a powerful tool which allows Go's types to be open for extension.
----
type Cat struct {
        Name string
}

func (c Cat) Legs() int { return 4 }

func (c Cat) PrintLegs() {
        fmt.Printf("I have %d legs\n", c.Legs())
}

type OctoCat struct {
        Cat
}

func (o OctoCat) Legs() int { return 8 }

func main() {
        var octo OctoCat
        fmt.Println(octo.Legs()) // 8
        octo.PrintLegs()         // I have 4 legs
}
----
In this example we have a `Cat` type, which can count its number of legs with the `Legs` method.
We embed this `Cat` type into a new type, an `OctoCat`, and declare that octocats have eight legs.

Though `OctoCat` defines it's own `Legs` method which returns 8, when the `PrintLegs` method is invoked, it returns 4.

This is because `PrintLegs` is defined on the `Cat` type, it takes a Cat as its receiver, and so it dispatches to `Cat`'s `Legs` method.

`Cat` has no knowledge of the type it has been embedded inside of, so its method set cannot be altered by embedding it.

Thus, Go's types are closed for modification.

In truth, methods in Go are little more than syntactic sugar around a function with a predeclared formal parameter, the receiver.
----
func (c Cat) PrintLegs() {
        fmt.Printf("I have %d legs\n", c.Legs())
}
----
The receiver is exactly what you pass into it, the first parameter of the function. 
----
func PrintLegs(c Cat) {
        fmt.Printf("I have %d legs\n", c.Legs())
}
----
And because Go does not support function overloading, `OctoCat`'s are not substitutable for regular `Cat`'s.
And this brings us to the next principle.

== Liskov substitution principal

Coined by Barbara Lisvok, the Liskov substitution principle states, roughly, that two types are substitutable if they exhibit behaviour such that the caller is unable to tell the difference.

In a class based language, Liskov's substitution principle is commonly interpreted as a specification for an abstract base class with various concrete implementations.

But Go does not have classes, or inheritance, so substitution cannot be implemented in terms of an abstract class hierarchy.

=== Interfaces

Substitution is the purview of Go’s interfaces.

In Go, types are not required to nominate, either by an `implements` declaration or by extending from an abstract type, that they implement a particular interface. 

Instead any type can implement an interface provided it has methods whose signature matches the interface declaration.

While it is not possible to modify a type from another package, at any time an interface may be defined, and if a type satisfies this new interface, then automatically that type is an implementation of the desired interface.

We say that in Go interfaces are satisfied implicitly, rather than explicitly, and this has a profound impact on how they are used within the language.

=== Small interfaces

Well designed interfaces are more likely to be small interfaces; the prevailing idiom is an interface contains only a single method.

It follows logically that small interfaces lead to simple implementations, because it is hard to do otherwise.

Which leads to packages comprised of simple implementations connected by common _behaviour_.

A canonical example of small interfaces are the stream oriented interfaces found in the `io` package.
----
type Reader interface {
        // Read reads up to len(buf) bytes into buf.
        Read(buf []byte) (n int, err error)
}

type Writer interface {
        // Write writes len(buf) bytes from buf to the underlying stream.
        Write(buf []byte) (n int, err error)
}

type Closer interface {
        // Close closes the underlying data stream.
        Close() errorr
}
----

- Read reads data into the supplied buffer, and returns to the caller the number of bytes that were read, and possibly an error encountered during read.
- Write writes the contents of the buffer, which may be less than the total size of the buffer if an error occured.
- Close closes the stream, signalling that no further processing will be done.

These three interfaces are highly pervasive inside Go programs, and because of their simple contract, they permit many decoupled implementations.

=== Design by contract

Go does not have Eiffel's design by contract, but we do have a tradition of small interfaces.

So the Liskov substitution principle could be summarized in Go by this lovely aphorism from Jim Weirich.

[quote, Jim Weirich]
Require no more, promise no less

And we see this in the trend in API design for libraries to declare function signatures composed of parameters of interface, not concrete types.

And this is a great segue into the next SOLID principle.

== Interface segregation principal

The fourth principle is the interface segregation principle.

[quote, Robert C. Martin]
____
Clients should not be forced to depend on methods they do not use.
____

The interface segregation principle states that clients should not be forced to depend on methods they do not use.

In Go, the application of the interface segregation principle can refer to a process of isolating the behaviour required for a function to do its job.
As a concrete example, say I've been given a task to write a function that persists a Document structure to disk.
----
// Save writes the contents of doc to the file f.
func Save(f *os.File, doc *Document) error
----
I could specify this function to take an `*os.File`, a type from the standard library that represents a file in the local file system of the machine.
But this has a few problems

The signature of `Save` precludes the option to write the data to a network location, unless it was previously made available as a network share.
Assuming that in this cloud oriented world, network storage is likely to become requirement later, the signature of this function would have to change, impacting all its callers.

`Save` is also unpleasant to test, as it assumes that the host running the test will have access to a writable disk, and again in this world of containers and read only file systems, this is less of a given than it was a decade ago.

Because this function works directly with files on disk, to verify its operation, the test would have to read the contents of the file after being written.

And I would have to ensure that `f` was written to a temporary location and always removed afterwards.

`*os.File` also defines a lot of methods which are not relevant to `Save`, like reading directories and checking to see if a path is a symlink.
It would be useful if the signature of the `Save` function could describe only the parts of `*os.File` that were relevant.

In Go, we often compose interfaces from smaller ones.
The `io` package provides an interface composed of the three basic io interfaces we saw earlier called io.ReadWriteCloser
You can see the similarities for embedding one interface inside another looks quite similar to embedding type
Using `io.ReadWriteCloser` we can apply the interface segregation principle to redefine `Save` to take an interface that describes more general stream shaped things.
----
// Save writes the contents of doc to the supplied Writer.r
func Save(rwc io.ReadWriteCloser, doc *Document) error
----
With this change, any type that implements the `io.ReadWriteCloser` interface can be substituted for the previous `*os.File`.

This makes `Save` both broader in its operation, and clarifies to both the caller and author of `Save` which methods of the `*os.File` type are relevant to its operation.

As the author of Save I no longer have the option to call those unrelated methods on os.File as it is hidden behind the ReadWriteCloser interface.

But we can take the interface segregation principle a bit further.

Firstly, it is unlikely that if `Save` follows the single responsibility principle, it will read the file it just wrote to verify its contents--that should be responsibility of another piece of code.

So we can narrow the specification for the interface we pass to Save to just writing and closing.
----
// Save writes the contents of doc to the supplied Writer.
func Save(rc io.WriteCloser, doc *Document) error
----
Secondly, by providing `Save` with a mechanism to close its stream, which we inherited in this desire to make it still look like a file, this raises the question of under what circumstances will `rc` be closed.

Possibly Save will call Close unconditionally, or perhaps Close will be called in the case of success.
This presents a problem for the caller of `Save` as it may want to write additional data to the stream after the document is written.
----
// type NoCloseWriter struct { io.Writer }
func (ncw NoCloseWriter) Close() error { return nil }
----
A crude solution would be to define a new type which embeds an `io.Writer` and overrides the `Close` method, preventing `Save` from closing the underlying stream.

But this would probably be a violation of LSP, as NoCloseWriter doesn’t actually close anything. It’s probably ok, because the contract for close is quite loose, but I think we can do better.
----
// Save writes the contents of doc to the supplied Writer.
func Save(rc io.Writer, doc *Document) error
----
A better solution would be to redefine `Save` to take only an `io.Writer`, stripping it completely of the responsibility to do anything but write data to a stream.

By applying the interface segregation principle to our `Save` function, the results has simultaneously been a function which is the most specific in terms of its requirements--it only needs a thing that is writable--and the most general in its function, it can now use Save to save our data to anything which implements io.Writer.

== Dependency inversion principal

The final SOLID principal is the dependency inversion principal.

Which states:

[quote, Robert C. Martin]
____
Depend on abstractions, not on concretions.
____

What does dependency inversion mean in practice for Go programmers?

At a superficial level if a concretion is a type, an abstraction would therefore be an interface.
More fundamentally a concretion is one piece of code depending on another.

If you've applied all the principles we’ve talked about up to this point then your code should already be factored into discrete packages, each with a single well defined responsibility or purpose.
Your code should describe its dependencies in terms of interfaces, and those interfaces should be factored to describe only the behaviour those functions require.

In other words, there shouldn't be much left to do at this point.

So it’s useful to look at a slightly longer definition of the dependency inversion principle.

[quote, Robert C. Martin]
____
High-level modules should not depend on low-level modules. Both should depend on abstractions.

Abstractions should not depend on details. Details should depend on abstractions.
____
So what I think Uncle bob is talking about here, certainly the context of Go, is the structure of your import graph.

In Go, a package is not permitted to import itself, either directly, or transitively.
Your import graph must be acyclic.

A failure to respect this acyclic requirement is grounds for a compilation failure, but more gravely represents a serious error in design.

All things being equal the the import graph of a well design Go program should be a wide, and relatively flat, rather than tall and narrow.

If you have a package whose functions cannot operate without enlisting the aid of another package, that is perhaps a sign that code is not well factored along package boundaries.

The dependency inversion principle encourages you to push the responsibility for the specifics, the concretions, as high as possible up the import graph, leaving the lower level code to deal with abstractions — interfaces.

== A theme

Each of Martin's SOLID principles are powerful statements about design in their own right, but taken together they have a central theme.

Martin's observation is all five of the SOLID principles relate to the management of dependencies between software units.
The dependencies between functions, the dependencies between types, the dependencies between packages.

This is another way of saying "decoupling", which is indeed the goal, because software that is loosely coupled is software that is easier to change.

// slide - bad design words

- SRP encourages you to structure the functions, types, and methods of a Go program into packages that exhibit natural cohesion, the types belong together, the functions serve a singular purpose.
- OCP encourages you to compose types with embedding, rather than extend them through inheritance.
- LSP encourages you to express the dependencies between your packages in terms of interfaces, not concrete types. By defining small interfaces, we can be more confident that implementations will faithfully satisfy the contract of these interfaces.
- ISP takes that idea further and encourages you to define functions and methods that depend only on the behaviour that they need. If your function only requires a parameter with a single interface method, then it is more likely that this function has only one responsibility.
- DIP encourages you to refactor the number things your package depends on at compile time--in Go we see this with a reduction in the number of `import` statements used by a particular package.

If you were to summarise this talk it would probably be; interfaces let you apply the SOLID principles to Go programs.
Interfaces let Go programmers describe what their package provides--not how it does it.

// But—and this is crucial—do not merely _substitute_ an interface for concrete types, do not create an interface so you can mock the concrete type, use and interface to _describe_ the behaviour the code expects.
// Use and interface to describe the contract between two compoents.
// And, if you do it right, those interfaces will naturally be small.
// And when I say small, i mean one method, because each type should have only a single responsibility -- a singe purpose -- a single behavoiur

== Coda

In closing, let's return to the question I opened this talk with.

How many go developers are there?

Last month I was lucky enough to pose this question to Donnie Berkholz, but it turned out he misherd me and instead told me that he thinks, in the world, there are around 25 million programmers.

But, in his presentation he mentioned that Go has somewhere between 1-2% market share.
So, here's my guess:

[quote, me]
____
By 2020, there will be 300-500k Go developers?
____

Here's a very scientific graph I made.

Plotting the various estimates of the number of programmers in the world, then multiplying it by the roughly 1-2% market share Go has at the moment, I think this number is defensible.

In his keynote late last year, Martin Odesrsky said last there are around 100 thousand scala developers, so is it so hard to believe that by the end of the decade there will be three to five times the number of Scala programmers today.

So what will half a million go programmers do with their time?
Well, they’ll write a lot of Go code and, to be frank, most of it won't be very good, or at least, very remarkable. 

Please understand that I do not say this to be cruel, and I certainly don't mean to imply these poor programs will be written by the people in this room. 
But, every one of you in this room with experience with development in other languages--the languages you can from, to go--some with much larger followings than Go may ever achieve, knows from your own experience that this prediction has an element of truth to it.

And this is my point, the same narrative that derides other languages for being bloated, overcomplicated, poorly designed, verbose, unworkable, or just in need of a damn good rewrite, may very well happen to Go.

The biggest threat to Go will not be a faster, special purpose language, but the ability of all of us, all Go programmers, as a population, to not make such a mess of it that we start to talk about Go in the way that you probably joke about Java today.

I don't want to see this happen, so I have two requests:

My first request, is Go programmers need to start talk less about frameworks, and start talking more about design.
We need to stop focusing on performance at all cost, and focus on reuse at all cost. 

- This is the point in Go's lifecycle to stop talking about what other languages cannot do.
- This is the time to start talking about what we _can_ do, with our language.
- What I want to see is people talking about how to use the language we have today, whatever its choices and limitations, to design solutions and to solve problems. 
- What I want to hear is people talking about how to design Go progams in a way that is well engineered, decoupled, reusable, and above all responsive to changing requirements.
-We should concentrate on writing packages that can compose with others. To make a language ecosystem not of projects, but components.

For my second request, it's great that so many of you are here today to hear from the great lineup of speakers, to meet and network with your compatriates in the audience, but no matter how large GolangUK would ever grow, comparatively we attendees will always be a minority.

So we need to tell the rest of the world how good software should be witten.
Good software, composable software, software that is ameable to change, and show them how to do it, in Go.
And that starts with you.

Start talking about design, maybe use some of the ideas I presented here as a base, and apply those ideas to your projects.

- Write about it
- Blog about it
- If you can, open source your code.
- Teach a workshop about it
- Write a book about it,
- Come back to this conference next year and give a talk about it.

Because this is how we can develop a culture of Go developers caring about design.

Thank you.
